ext {
    sonatypeUrl = ""
    isDevBuild = false
    isReleaseBuild = false
}

version = 'git describe --abbrev=0 --tags'.execute([], project.rootDir).text.trim()
group = GROUP

if (hasProperty("release")) {
    isReleaseBuild = true
    sonatypeUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
} else if (hasProperty("snapshot")) {
    version += "-SNAPSHOT"
    sonatypeUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
} else {
    isDevBuild = true
}

buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:0.10.+'
        classpath 'com.jakewharton.sdkmanager:gradle-plugin:0.10.+'
        classpath 'org.robolectric.gradle:gradle-android-test-plugin:0.10.+'
    }
}

apply plugin: 'android-sdk-manager'
apply plugin: "android-library"
apply plugin: 'android-test'

android {
    compileSdkVersion 19
    buildToolsVersion '19.0.3'

    defaultConfig {
        targetSdkVersion 19

        versionCode = {
            int code = 0
            int versionNumber = 10000
            version.split('.').each {
                code += it * versionNumber
                versionNumber /= 10
            }
            return code;
        }()
        versionName = version
    }

    sourceSets {
        androidTest {
            setRoot('src/test')
        }
    }
}

repositories {
    mavenCentral()
}

dependencies {
    androidTestCompile 'junit:junit:4.11'
    androidTestCompile 'org.robolectric:robolectric:2.2'
    androidTestCompile 'com.squareup:fest-android:1.0.+'
}

apply plugin: 'idea'

idea {
    module {
        testOutputDir = file('build/test-classes/debug')
    }
}

apply plugin: "maven"
apply plugin: "signing"

afterEvaluate { project ->
    uploadArchives {
        repositories {
            if (isDevBuild) {
                mavenLocal()
            } else {
                mavenDeployer {
                    beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                    repository(url: sonatypeUrl) {
                        authentication(userName: sonatypeUsername, password: sonatypePassword)
                    }

                    pom.project {
                        name 'AndroidIBeaconLibrary'
                        packaging 'aar'
                        description 'IBeacon library for Android applications'
                        artifactId = 'AndroidIBeaconLibrary'
                        groupId GROUP
                        version version
                        url 'https://github.com/RadiusNetworks/android-ibeacon-service'

                        scm {
                            url 'scm:git@github.com:RadiusNetworks/android-ibeacon-service.git'
                            connection 'scm:git@github.com:RadiusNetworks/android-ibeacon-service.git'
                            developerConnection 'scm:git@github.com:RadiusNetworks/android-ibeacon-service.git'
                        }

                        licenses {
                            license {
                                name 'The Apache Software License, Version 2.0'
                                url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                                distribution 'repo'
                            }
                        }

                        developers {
                            developer {
                                id 'davidgyoung'
                                name 'David Young'
                                email 'david@radiusnetworks.com'
                            }
                        }
                    }
                }
            }
        }
    }

    signing {
        required { isReleaseBuild && gradle.taskGraph.hasTask("uploadArchives") }
        sign configurations.archives
    }

    task androidJavadocs(type: Javadoc) {
        source = android.sourceSets.main.allJava
    }

    task androidJavadocsJar(type: Jar) {
        classifier = 'javadoc'
        from androidJavadocs.destinationDir
    }

    task androidSourcesJar(type: Jar) {
        classifier = 'sources'
        from android.sourceSets.main.allSource
    }

    artifacts {
        archives androidSourcesJar
        archives androidJavadocsJar
    }
}

task bundleEclipse(type: Exec) {
    commandLine './scripts/bundle-eclipse'
}

task distribution(dependsOn: [ bundleEclipse, build, clean]) { }

task mavenSnapshot(type: Exec) {
    executable = 'gradle'
    workingDir = project.rootDir
    args = [ 'uploadArchives', '-Psnapshot' ]
}

task mavenRelease(type: Exec) {
    executable = 'gradle'
    workingDir = project.rootDir
    args = [ 'uploadArchives', '-Prelease' ]
}

task release(dependsOn: [ distribution, mavenRelease ]) { }

build.mustRunAfter clean
bundleEclipse.mustRunAfter build